#  streamlit_app.py   ‚Ä¢   –¢–∞–π–Ω—ã–π –≥–æ—Å—Ç—å: –ú–∏—Å—Å–∏—è "–ò–¥–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
#  -------------------------------------------------------------------
#  v3.0:  ‚Ä¢ –≥–∏–±–∫–∏–µ –∫–ª—é—á–∏ (kw_must / kw_any / kw_all)
#         ‚Ä¢ –ø—Ä–æ–ø—É—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤, –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–ª –∏—Ö —Ä–∞–Ω–µ–µ
#         ‚Ä¢ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫
#         ‚Ä¢ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è pymorphy2 + st.rerun()

import streamlit as st
import re, json
from collections import deque
from typing import List, Dict

# ---------- NLP (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è) ---------------------------------
try:
    from pymorphy2 import MorphAnalyzer
    morph = MorphAnalyzer()
except ImportError:
    morph = None                    # —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ pymorphy2

def normalize(txt: str) -> str:
    txt = re.sub(r"[^\w\s]", " ", txt.lower())
    if not morph:
        return re.sub(r"\s+", " ", txt).strip()
    return " ".join(morph.parse(w)[0].normal_form for w in txt.split())

def has_all(keys: List[str], text: str) -> bool:
    return all(k in text for k in keys)

def has_any(keys: List[str], text: str) -> bool:
    return any(k in text for k in keys)

# ---------- –ê–Ω–∫–µ—Ç–∞ ---------------------------------------------
CRITERIA: Dict[str, Dict] = json.loads("""{
  "1. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï": {
    "weight": 0.21,
    "items": {
      "1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–≤—ã–º":  {"w":0.02, "kw_any":["–∑–¥—Ä–∞–≤","–¥–æ–±—Ä","–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤"]},
      "1.2 –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è":        {"w":0.02, "kw_must":["–º–µ–Ω—è"], "kw_any":["–∑–æ–≤","–∑–æ–≤—É—Ç","–∏–º—è"]},
      "1.3 –ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è":      {"w":0.03, "kw_must":["–∫–∞–∫"], "kw_any":["–æ–±—Ä–∞—â","–º–æ–∂–Ω"]},
      "1.5 –í–µ–∂–ª–∏–≤–æ—Å—Ç—å":          {"w":0.05},
      "1.6 –ù–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª":        {"w":0.01},
      "1.7 –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":  {"w":0.04},
      "1.8 –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å —Ä–µ—á–∏":  {"w":0.04}
    }
  },

  "2. –í–´–Ø–í–õ–ï–ù–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô": {
    "weight": 0.18,
    "items": {
      "2.1 –¶–µ–ª—å –≤–∏–∑–∏—Ç–∞":         {"w":0.02, "kw_any":["—Ü–µ–ª—å"]},
      "2.2 –ó–ü-–∫–∞—Ä—Ç–∞ –ü–°–ë":        {"w":0.04, "kw_must":["–∑–∞—Ä–ø–ª–∞—Ç"], "kw_any":["–ø—Å–±","–Ω–∞—à","–±–∞–Ω–∫"]},
      "2.3 –°—É–º–º–∞/—Å—Ä–æ–∫/—Ü–µ–ª—å":     {"w":0.06, "kw_all":["—Å—É–º–º","—Å—Ä–æ–∫","—Ü–µ–ª—å"]},
      "2.4 –î–æ—Ö–æ–¥":               {"w":0.03, "kw_any":["–¥–æ—Ö–æ–¥","–∑–∞—Ä–∞–±–æ—Ç"]},
      "2.5 –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ –≤–æ–ø—Ä–æ—Å–∞—Ö":{"w":0.03, "kw_any":["–∑–∞–¥–∞–º","–Ω–µ—Å–∫–æ–ª—å–∫","—Ä—è–¥","–≤–æ–ø—Ä–æ—Å"]}
    }
  },

  "3. –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–Ø": {
    "weight": 0.20,
    "items": {
      "3.1 8 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π":        {"w":0.08, "kw_all":[
        "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤","–≤–æ–∑—Ä–∞—Å—Ç","—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü","–ø—Ä–æ–∂–∏–≤",
        "—Ä–∞–±–æ—Ç","–æ–±—â–∏–π","—Å—Ç–∞–∂","—Ç–µ–ª–µ—Ñ–æ–Ω"]},
      "3.2 –†–∞—Å—á—ë—Ç –ø–ª–∞—Ç–µ–∂–∞":      {"w":0.04, "kw_any":["–ø–ª–∞—Ç–µ–∂","–ø–ª–∞—Ç—ë–∂","–µ–∂–µ–º–µ—Å—è—á"]},
      "3.3 –ö–æ–º—Ñ–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–∞":     {"w":0.04, "kw_any":["–∫–æ–º—Ñ–æ—Ä—Ç","—É–¥–æ–±–Ω","–ø–æ–¥—Ö–æ–¥"]},
      "3.4 –ê–∫—Ü–∏—è ¬´–õ—É—á—à–µ 0¬ª":     {"w":0.04, "kw_must":["–ª—É—á—à"], "kw_any":["0","–Ω–æ–ª","–∞–∫—Ü"]}
    }
  },

  "4. –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò": {
    "weight": 0.05,
    "items": {
      "4.1 –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å":     {"w":0.02, "kw_any":["–æ—Ñ–æ—Ä–º","—Å–µ–π—á–∞—Å","–¥–∞–≤–∞–π","–ø—Ä–µ–¥–ª–∞–≥"]},
      "4.2 –î–æ–∫—É–º–µ–Ω—Ç—ã":           {"w":0.03, "kw_all":["–ø–∞—Å–ø–æ—Ä—Ç","—Å–Ω–∏–ª—Å","–¥–æ—Ö–æ–¥","—Ç—Ä—É–¥–æ–≤"]}
    }
  },

  "5. –ö–†–û–°–°-–ü–†–û–î–ê–ñ–ò": {
    "weight": 0.10,
    "items": {
      "5.1 –î–æ–ø. –ø—Ä–æ–¥—É–∫—Ç":        {"w":0.10, "kw_any":["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫","–¥–µ–±–µ—Ç","–∫–∞—Ä—Ç–∞","—Å—Ç—Ä–∞—Ö–æ–≤"]}
    }
  },

  "6. –ó–ê–í–ï–†–®–ï–ù–ò–ï": {
    "weight": 0.15,
    "items": {
      "6.1 –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã":    {"w":0.02, "kw_any":["–≤–æ–ø—Ä–æ—Å"]},
      "6.2 –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞":   {"w":0.03, "kw_any":["–≤—Å—Ç—Ä–µ—á","–ø—Ä–∏–≥–ª","–ø–æ–∑–≤–æ–Ω","–ø—Ä–µ–¥–ª–∞–≥"]},
      "6.3 –¢–µ–ª–µ—Ñ–æ–Ω":             {"w":0.03, "kw_any":["—Ç–µ–ª–µ—Ñ–æ–Ω","–Ω–æ–º–µ—Ä","–æ—Å—Ç–∞–≤"]},
      "6.4 –ö–æ–Ω—Ç–∞–∫—Ç—ã":            {"w":0.03, "kw_any":["–∫–æ–Ω—Ç–∞–∫—Ç","—Ç–µ–ª–µ—Ñ","–Ω–æ–º–µ—Ä"]},
      "6.5 –†–µ–∫–ª–∞–º–∞/–º–∞—Ç–µ—Ä–∏–∞–ª—ã":   {"w":0.02, "kw_any":["–±—É–∫–ª–µ—Ç","–º–∞—Ç–µ—Ä–∏–∞–ª","—Ä–∞—Å—á–µ—Ç","—Ä–∞—Å—á—ë—Ç","–ø—Ä–æ—Å—á–µ—Ç","–ø—Ä–æ—Å—á—ë—Ç"]},
      "6.6 –ü—Ä–æ—â–∞–Ω–∏–µ":            {"w":0.02, "kw_any":["–¥–æ —Å–≤–∏–¥–∞–Ω","–∂–¥–µ–º","–∂–¥—ë–º","—Ä–∞–¥—ã","–¥–æ–±—Ä"]}
    }
  }
}""")

STAGE7_WEIGHT = 0.10
STAGE7_TEXT = ("1. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ—Å—Ç—å –∑–∞–ª–∞\n"
               "2. –ù–µ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —à—É–º–æ–≤\n"
               "3. –î–µ–ª–æ–≤–æ–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
               "4. –ü–ª–∞—Ç–æ–∫/–≥–∞–ª—Å—Ç—É–∫ –∏ –±–µ–π–¥–∂")

MAX_ATTEMPTS = 3      # –ø–æ—Å–ª–µ 3-–π –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

# ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ----------------------------------
def build_queue() -> deque:
    q = deque()
    for s, data in CRITERIA.items():
        for c in data["items"]:
            q.append((s, c))
    q.append(("7. –î–û–ü. –ò–ù–§–û–†–ú–ê–¶–ò–Ø", "stage7"))
    return q

def init_state():
    st.session_state.q          = build_queue()
    st.session_state.section_txt= {s: "" for s in CRITERIA}
    st.session_state.score      = {s: 0.0 for s in CRITERIA}
    st.session_state.tries      = {}
    st.session_state.stage7     = False
    st.session_state.finished   = False
    st.session_state.chat       = []

if "q" not in st.session_state:
    init_state()

def add(role, msg): st.session_state.chat.append((role, msg))

# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ --------------------------
def criterion_ok(cfg, text_norm):
    ok = True
    if "kw_must" in cfg: ok &= has_all(cfg["kw_must"], text_norm)
    if "kw_all"  in cfg: ok &= has_all(cfg["kw_all"],  text_norm)
    if "kw_any"  in cfg: ok &= has_any(cfg["kw_any"],  text_norm)
    return ok

# ---------- UI: –∏—Å—Ç–æ—Ä–∏—è ---------------------------------------
st.title("–¢–∞–π–Ω—ã–π –≥–æ—Å—Ç—å: –ú–∏—Å—Å–∏—è ¬´–ò–¥–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª")
for r, m in st.session_state.chat:
    st.chat_message(r).write(m)

# ---------- –º–∏–∑–∞–Ω—Å—Ü–µ–Ω–∞ ----------------------------------------
if not st.session_state.chat:
    add("assistant", "–¢–ü: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ –æ–∫–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")
    st.chat_message("assistant").write("–¢–ü: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ –æ–∫–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

# ---------- –∞–≤—Ç–æ-–ø—Ä–æ—Å–∫–æ–∫ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ----------
while st.session_state.q:
    sec, crit = st.session_state.q[0]
    if crit == "stage7": break
    cfg = CRITERIA[sec]["items"][crit]
    text_norm = normalize(st.session_state.section_txt[sec])
    if criterion_ok(cfg, text_norm):
        st.session_state.score[sec] += cfg.get("w", 0)
        st.session_state.q.popleft()
    else:
        break   # –ø–µ—Ä–≤—ã–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–æ–¥–ø—É–Ω–∫—Ç –Ω–∞–π–¥–µ–Ω

# ---------- –≤—ã–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ / –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ------------------
if st.session_state.q:
    sec, crit = st.session_state.q[0]

    # ---- stage-7 ----------
    if crit == "stage7":
        prompt = ("–¢–ü: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ñ–∏—Å–∞:\n"
                  f"{STAGE7_TEXT}\n"
                  "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å—ë –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É?")
    else:
        prompt = f"–¢–ü (–∫—Ä–∏—Ç–µ—Ä–∏–π ¬´{crit}¬ª —Ä–∞–∑–¥–µ–ª–∞ ¬´{sec}¬ª): –ø—Ä–æ—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

    st.chat_message("assistant").write(prompt)
    reply = st.chat_input("–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞‚Ä¶")

    if reply:
        add("user", reply)

        # –∫–æ–ø–∏–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
        if sec in st.session_state.section_txt:
            st.session_state.section_txt[sec] += " " + reply

        if crit == "stage7":
            if normalize(reply) in ("–¥–∞", "–≤—Å–µ", "–≤—Å—ë"):
                st.session_state.stage7 = True
                st.session_state.q.popleft()
                add("assistant", "‚úÖ  –≠—Ç–∞–ø 7 –∑–∞—á—Ç—ë–Ω, —Å–ø–∞—Å–∏–±–æ!")
            else:
                add("assistant", "‚ö†Ô∏è  –î–ª—è –∑–∞—á—ë—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–í—Å–µ¬ª.")
        else:
            cid = f"{sec} >> {crit}"
            st.session_state.tries[cid] = st.session_state.tries.get(cid, 0) + 1
            text_norm = normalize(st.session_state.section_txt[sec])

            if criterion_ok(cfg, text_norm):
                st.session_state.score[sec] += cfg["w"]
                st.session_state.q.popleft()
                add("assistant", "‚úÖ  –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª–µ–µ.")
            else:
                if st.session_state.tries[cid] >= MAX_ATTEMPTS:
                    must  = cfg.get("kw_must", [])
                    all_  = cfg.get("kw_all", [])
                    any_  = cfg.get("kw_any", [])
                    hint = " / ".join(must + all_ + any_)
                    add("assistant", f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω—É–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å: {hint}")
                else:
                    add("assistant", "‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç.")

        st.rerun()

# ---------- –∏—Ç–æ–≥ ----------------------------------------------
if not st.session_state.q and not st.session_state.finished:
    gained = sum(st.session_state.score.values()) + (STAGE7_WEIGHT if st.session_state.stage7 else 0)
    total  = sum(sec["weight"] for sec in CRITERIA.values()) + STAGE7_WEIGHT
    pct    = round(gained / total * 100, 1)
    verdict = ("–û–¢–õ–ò–ß–ù–û" if pct >= 90 else
               "–•–û–†–û–®–û"  if pct >= 75 else
               "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" if pct >= 60 else
               "–ù–£–ñ–ù–û –î–û–†–ê–ë–û–¢–ê–¢–¨")
    add("assistant", f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {pct}%  ‚Ä¢  –°—Ç–∞—Ç—É—Å: {verdict}")
    st.session_state.finished = True
    st.rerun()
