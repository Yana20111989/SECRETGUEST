#  streamlit_app.py  ‚Ä¢  Mystery Shopper PSB  (web GUI, v2.1)
#  ---------------------------------------------------------------
#  ‚Äì –º–∏–∑–∞–Ω—Å—Ü–µ–Ω–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–≤—ã–º
#  ‚Äì –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#  ‚Äì –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫
#  ‚Äì –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è (pymorphy2)
#  ‚Äì st.rerun() –≤–º–µ—Å—Ç–æ experimental_rerun
#  ‚Äì –ø—Ä–∞–≤–∫–∏: 2.5, –ø–µ—Ä–µ–Ω–æ—Å "–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏" –≤ 3.5 –∏ 6.7,
#            —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ 6.5 –∫–ª—é—á–∞–º–∏ "—Ä–∞—Å—á—ë—Ç / –ø—Ä–æ—Å—á—ë—Ç"
#  ---------------------------------------------------------------
import streamlit as st
import re, json
from collections import deque
from typing import List, Dict

# ---------- NLP (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è) ---------------------------------
try:
    from pymorphy2 import MorphAnalyzer
    morph = MorphAnalyzer()
except ImportError:
    morph = None

def normalize(txt: str) -> str:
    txt = re.sub(r"[^\w\s]", " ", txt.lower())
    if not morph:
        return re.sub(r"\s+", " ", txt).strip()
    return " ".join(morph.parse(w)[0].normal_form for w in txt.split())

def has_all(keys: List[str], text: str) -> bool:
    t = normalize(text)
    return all(k in t for k in keys)

def has_any(keys: List[str], text: str) -> bool:
    t = normalize(text)
    return any(k in t for k in keys)

# ---------- –ê–Ω–∫–µ—Ç–∞ ---------------------------------------------
CLIENT_NAME = "–º–∏—Ö–∞–∏–ª"

CRITERIA: Dict[str, Dict] = json.loads("""{
  "1. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï": {
    "weight": 0.21,
    "items": {
      "1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–≤—ã–º":              {"w":0.02, "kw":["–∑–¥—Ä–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å","–¥–æ–±—Ä—ã–π"]},
      "1.2 –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è":                    {"w":0.02, "kw":["–º–µ–Ω—è","–∑–≤–∞—Ç—å"]},
      "1.3 –£—Ç–æ—á–Ω–∏–ª, –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è":         {"w":0.03, "kw":["–∫–∞–∫","–æ–±—Ä–∞—â–∞—Ç—å—Å—è"]},
      "1.5 –í–µ–∂–ª–∏–≤–æ—Å—Ç—å":                      {"w":0.05, "kw":[]},
      "1.6 –ù–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª":                    {"w":0.01, "kw":[]},
      "1.7 –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":              {"w":0.04, "kw":[]},
      "1.8 –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å —Ä–µ—á–∏":              {"w":0.04, "kw":[]}
    }
  },
  "2. –í–´–Ø–í–õ–ï–ù–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô": {
    "weight": 0.18,
    "items": {
      "2.1 –¶–µ–ª—å –≤–∏–∑–∏—Ç–∞":                     {"w":0.02, "kw":["—Ü–µ–ª—å"]},
      "2.2 –ó–ü-–∫–∞—Ä—Ç–∞ –ü–°–ë":                    {"w":0.04, "kw":["–∑–∞—Ä–ø–ª–∞—Ç","–ø—Å–±"]},
      "2.3 –°—É–º–º–∞-—Å—Ä–æ–∫-—Ü–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞":         {"w":0.06, "kw":["—Å—É–º–º","—Å—Ä–æ–∫","—Ü–µ–ª—å"]},
      "2.4 –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞":                  {"w":0.03, "kw":["–¥–æ—Ö–æ–¥"]},
      "2.5 –£—Ç–æ—á–Ω–∏–ª, —á—Ç–æ –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å—ã":     {"w":0.03, "kw_any":["–∑–∞–¥–∞–º","–Ω–µ—Å–∫–æ–ª—å–∫–æ","—Ä—è–¥","–≤–æ–ø—Ä–æ—Å"]}
    }
  },
  "3. –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–Ø –ü–†–û–î–£–ö–¢–ê": {
    "weight": 0.24,
    "items": {
      "3.1 8 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–∞—ë–º—â–∏–∫—É":         {"w":0.08, "kw":[
          "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ","–≤–æ–∑—Ä–∞—Å—Ç","—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è","–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ",
          "—Ä–∞–±–æ—Ç–∞","–æ–±—â–∏–π","—Å—Ç–∞–∂","—Ç–µ–ª–µ—Ñ–æ–Ω"]},
      "3.2 –†–∞—Å—á—ë—Ç –ø–ª–∞—Ç–µ–∂–∞":                  {"w":0.04, "kw":["–ø–ª–∞—Ç–µ–∂","–µ–∂–µ–º–µ—Å—è—á–Ω—ã–π"]},
      "3.3 –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞":            {"w":0.04, "kw":["–∫–æ–º—Ñ–æ—Ä—Ç","—É–¥–æ–±–Ω–æ","–ø–æ–¥—Ö–æ–¥–∏—Ç"]},
      "3.4 –ê–∫—Ü–∏—è ¬´–ª—É—á—à–µ 0¬ª":                 {"w":0.04, "kw":["–ª—É—á—à–µ","0","–Ω–æ–ª—å","–∞–∫—Ü–∏—è"]},
      "3.5 –û–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ –∏–º–µ–Ω–∏":              {"w":0.04, "kw_name": true}
    }
  },
  "4. –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò": {
    "weight": 0.05,
    "items": {
      "4.1 –ü—Ä–µ–¥–ª–æ–∂–∏–ª –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å":       {"w":0.02, "kw":["–æ—Ñ–æ—Ä–º","—Å–µ–π—á–∞—Å"]},
      "4.2 –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":             {"w":0.03, "kw":["–ø–∞—Å–ø–æ—Ä—Ç","—Å–Ω–∏–ª—Å","–¥–æ—Ö–æ–¥","—Ç—Ä—É–¥–æ–≤"]}
    }
  },
  "5. –ö–†–û–°–°-–ü–†–û–î–ê–ñ–ò": {
    "weight": 0.10,
    "items": {
      "5.1 –ò–ë/–∫–∞—Ä—Ç–∞/—Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç":      {"w":0.10, "kw_any":["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫","–¥–µ–±–µ—Ç","–∫–∞—Ä—Ç–∞","—Å—Ç—Ä–∞—Ö–æ–≤"]}
    }
  },
  "6. –ó–ê–í–ï–†–®–ï–ù–ò–ï": {
    "weight": 0.17,
    "items": {
      "6.1 –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã":                {"w":0.02, "kw":["–≤–æ–ø—Ä–æ—Å"]},
      "6.2 –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞":               {"w":0.03, "kw":["–≤—Å—Ç—Ä–µ—á"]},
      "6.3 –¢–µ–ª–µ—Ñ–æ–Ω":                         {"w":0.03, "kw":["—Ç–µ–ª–µ—Ñ–æ–Ω"]},
      "6.4 –ö–æ–Ω—Ç–∞–∫—Ç—ã":                        {"w":0.03, "kw":["–∫–æ–Ω—Ç–∞–∫—Ç"]},
      "6.5 –†–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":             {"w":0.02, "kw_any":["–±—É–∫–ª–µ—Ç","–º–∞—Ç–µ—Ä–∏–∞–ª","—Ä–∞—Å—á—ë—Ç","—Ä–∞—Å—á–µ—Ç","–ø—Ä–æ—Å—á—ë—Ç","–ø—Ä–æ—Å—á–µ—Ç"]},
      "6.6 –ü—Ä–æ—â–∞–Ω–∏–µ+–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ":            {"w":0.02, "kw_any":["–¥–æ —Å–≤–∏–¥–∞–Ω","–∂–¥—ë–º","–∂–¥–µ–º","—Ä–∞–¥—ã"]},
      "6.7 –û–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ –∏–º–µ–Ω–∏":              {"w":0.02, "kw_name": true}
    }
  }
}""")

STAGE7_WEIGHT = 0.10
STAGE7_TEXT = """\
1. –Ø –æ–±—Ä–∞—Ç–∏–ª –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞: –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—Å—Ç—å –∑–∞–ª–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —á–∏—Å—Ç–æ—Ç–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∞—Ö–æ–≤)
2. –í –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∑–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —à—É–º—ã
3. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ–¥–µ—Ç—ã –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ –∏ –≤—ã–≥–ª—è–¥—è—Ç –æ–ø—Ä—è—Ç–Ω–æ
4. –ù–∞–ª–∏—á–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: –ø–ª–∞—Ç–æ–∫/–≥–∞–ª—Å—Ç—É–∫ –∏ –∏–º–µ–Ω–Ω–æ–π –±–µ–π–¥–∂
"""

# ---------- —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã --------------------------------
def build_queue() -> deque:
    q = deque()
    for s, data in CRITERIA.items():
        for c in data["items"]:
            q.append((s, c))
    q.append(("7. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø", "stage7"))
    return q

def init():
    st.session_state.queue       = build_queue()
    st.session_state.scores      = {s: 0.0 for s in CRITERIA}
    st.session_state.accum       = {}   # criterion id ‚ûú collected text
    st.session_state.attempts    = {}
    st.session_state.stage7_done = False
    st.session_state.finished    = False
    st.session_state.hist        = []

if "queue" not in st.session_state:
    init()

def crit_id(sec, crit): return f"{sec} >> {crit}"

def add(role, txt): st.session_state.hist.append((role, txt))

# ---------- UI: –∏—Å—Ç–æ—Ä–∏—è ---------------------------------------
st.title("–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–∞–π–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–°–ë")

for r, t in st.session_state.hist:
    st.chat_message(r).write(t)

# ---------- –ø–µ—Ä–≤–∞—è –º–∏–∑–∞–Ω—Å—Ü–µ–Ω–∞ ---------------------------------
if not st.session_state.hist:
    scene = "–¢–ü: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ –æ–∫–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
    add("assistant", scene)
    st.chat_message("assistant").write(scene)

# ---------- –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ -----------------------------------
def process(ans: str):
    sec, crit = st.session_state.queue[0]
    cid = crit_id(sec, crit)

    # –≠—Ç–∞–ø 7
    if crit == "stage7":
        if normalize(ans) in ("–¥–∞", "–≤—Å–µ", "–≤—Å—ë"):
            st.session_state.stage7_done = True
            st.session_state.queue.popleft()
            add("assistant", "‚úÖ  –≠—Ç–∞–ø 7 –∑–∞—á—Ç—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
        else:
            add("assistant", "‚ö†Ô∏è  –î–ª—è –∑–∞—á—ë—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–í—Å–µ¬ª.")
        return

    cfg = CRITERIA[sec]["items"][crit]
    st.session_state.accum[cid] = st.session_state.accum.get(cid, "") + " " + ans
    st.session_state.attempts[cid] = st.session_state.attempts.get(cid, 0) + 1
    text = st.session_state.accum[cid]

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
    if cfg.get("kw_name"):
        ok = CLIENT_NAME in normalize(text)
    elif "kw_any" in cfg:
        ok = has_any(cfg["kw_any"], text)
    else:
        ok = has_all(cfg["kw"], text)

    if ok:
        st.session_state.scores[sec] += cfg["w"]
        st.session_state.queue.popleft()
        add("assistant", "‚úÖ  –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.")
        st.session_state.accum.pop(cid, None)
        st.session_state.attempts.pop(cid, None)
    else:
        if st.session_state.attempts[cid] >= 5:
            keys = cfg.get("kw_any", cfg.get("kw", ["–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"]))
            hint = " / ".join(keys)
            add("assistant", f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω—É–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å: {hint}")
        else:
            add("assistant", "‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç.")

# ---------- —Å–ª–µ–¥—É—é—â–∞—è —Ä–µ–ø–ª–∏–∫–∞ –¢–ü -------------------------------
if st.session_state.queue:
    sec, crit = st.session_state.queue[0]
    prompt = (f"–¢–ü: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ñ–∏—Å–∞:\n{STAGE7_TEXT}\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å—ë –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É?"
              if crit == "stage7"
              else f"–¢–ü (–∫—Ä–∏—Ç–µ—Ä–∏–π {crit} —Å–µ–∫—Ü–∏–∏ ¬´{sec}¬ª): –ø—Ä–æ—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    st.chat_message("assistant").write(prompt)

    user_ans = st.chat_input("–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞‚Ä¶")
    if user_ans:
        add("user", user_ans)
        process(user_ans)
        st.rerun()

# ---------- —Ñ–∏–Ω–∞–ª ---------------------------------------------
else:
    if not st.session_state.finished:
        got   = sum(st.session_state.scores.values()) + (STAGE7_WEIGHT if st.session_state.stage7_done else 0)
        total = sum(s["weight"] for s in CRITERIA.values()) + STAGE7_WEIGHT
        pct   = round(got / total * 100, 1)
        verdict = ("–û–¢–õ–ò–ß–ù–û" if pct >= 90 else
                   "–•–û–†–û–®–û" if pct >= 75 else
                   "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" if pct >= 60 else
                   "–ù–£–ñ–ù–û –î–û–†–ê–ë–û–¢–ê–¢–¨")
        add("assistant", f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {pct}%  ‚Ä¢  –°—Ç–∞—Ç—É—Å: {verdict}")
        st.session_state.finished = True
        st.rerun()
