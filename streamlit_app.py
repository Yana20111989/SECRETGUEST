#  streamlit_app.py  ‚Ä¢  Mystery Shopper PSB  (web-GUI, v2.3)
#  ------------------------------------------------------------------
#  ‚Ä¢ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è pymorphy2
#  ‚Ä¢ –≥–∏–±–∫–∏–µ –∫–æ—Ä–Ω–∏ (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ) ‚Äî –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
#  ‚Ä¢ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
#  ‚Ä¢ –∫—Ä–∏—Ç–µ—Ä–∏–π ¬´–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏¬ª —É–¥–∞–ª—ë–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ
#  ------------------------------------------------------------------
import streamlit as st
import re, json
from collections import deque
from typing import List, Dict

# ---------------- NLP  (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è) --------------------------
try:
    from pymorphy2 import MorphAnalyzer
    morph = MorphAnalyzer()
except ImportError:
    morph = None                     # —Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ pymorphy2

def normalize(text: str) -> str:
    text = re.sub(r"[^\w\s]", " ", text.lower())
    if not morph:
        return re.sub(r"\s+", " ", text).strip()
    return " ".join(morph.parse(w)[0].normal_form for w in text.split())

def has_all(keys: List[str], text: str) -> bool:
    t = normalize(text)
    return all(k in t for k in keys)

def has_any(keys: List[str], text: str) -> bool:
    t = normalize(text)
    return any(k in t for k in keys)

# ---------------- –ê–Ω–∫–µ—Ç–∞ (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏) -------------------
CRITERIA: Dict[str, Dict] = json.loads("""{
  "1. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï": {
    "weight": 0.21,
    "items": {
      "1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–≤—ã–º":      {"w":0.02, "kw_any":["–∑–¥—Ä–∞–≤","–¥–æ–±—Ä"]},
      "1.2 –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è":            {"w":0.02, "kw_all":["–º–µ–Ω—è","–∑–≤–∞—Ç—å"]},
      "1.3 –ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è":          {"w":0.03, "kw_all":["–∫–∞–∫","–æ–±—Ä–∞—â"]},
      "1.5 –í–µ–∂–ª–∏–≤–æ—Å—Ç—å":              {"w":0.05},
      "1.6 –ù–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª":            {"w":0.01},
      "1.7 –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":      {"w":0.04},
      "1.8 –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å —Ä–µ—á–∏":      {"w":0.04}
    }
  },
  "2. –í–´–Ø–í–õ–ï–ù–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô": {
    "weight": 0.18,
    "items": {
      "2.1 –¶–µ–ª—å –≤–∏–∑–∏—Ç–∞":             {"w":0.02, "kw_any":["—Ü–µ–ª—å"]},
      "2.2 –ó–ü-–∫–∞—Ä—Ç–∞ –ü–°–ë":            {"w":0.04, "kw_all":["–∑–∞—Ä–ø–ª–∞—Ç","–ø—Å–±"]},
      "2.3 –°—É–º–º–∞-—Å—Ä–æ–∫-—Ü–µ–ª—å":         {"w":0.06, "kw_all":["—Å—É–º–º","—Å—Ä–æ–∫","—Ü–µ–ª—å"]},
      "2.4 –î–æ—Ö–æ–¥":                   {"w":0.03, "kw_any":["–¥–æ—Ö–æ–¥"]},
      "2.5 –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ –≤–æ–ø—Ä–æ—Å–∞—Ö":  {"w":0.03, "kw_any":["–∑–∞–¥–∞–º","–Ω–µ—Å–∫–æ–ª—å–∫","—Ä—è–¥","–≤–æ–ø—Ä–æ—Å"]}
    }
  },
  "3. –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–Ø": {
    "weight": 0.20,
    "items": {
      "3.1 8 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π":           {"w":0.08, "kw_all":[
          "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤","–≤–æ–∑—Ä–∞—Å—Ç","—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü","–ø—Ä–æ–∂–∏–≤",
          "—Ä–∞–±–æ—Ç","–æ–±—â","—Å—Ç–∞–∂","—Ç–µ–ª–µ—Ñ–æ–Ω"]},
      "3.2 –†–∞—Å—á—ë—Ç –ø–ª–∞—Ç–µ–∂–∞":          {"w":0.04, "kw_any":["–ø–ª–∞—Ç–µ–∂","–µ–∂–µ–º–µ—Å—è—á"]},
      "3.3 –ö–æ–º—Ñ–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–∞":         {"w":0.04, "kw_any":["–∫–æ–º—Ñ–æ—Ä—Ç","—É–¥–æ–±–Ω","–ø–æ–¥—Ö–æ–¥"]},
      "3.4 –ê–∫—Ü–∏—è ¬´–õ—É—á—à–µ 0¬ª":         {"w":0.04, "kw_all":["–ª—É—á—à"], "kw_any2":["0","–Ω–æ–ª","–∞–∫—Ü"]}
    }
  },
  "4. –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò": {
    "weight": 0.05,
    "items": {
      "4.1 –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å":         {"w":0.02, "kw_all":["–æ—Ñ–æ—Ä–º","—Å–µ–π—á–∞—Å"]},
      "4.2 –î–æ–∫—É–º–µ–Ω—Ç—ã":               {"w":0.03, "kw_all":["–ø–∞—Å–ø–æ—Ä—Ç","—Å–Ω–∏–ª—Å","–¥–æ—Ö–æ–¥","—Ç—Ä—É–¥–æ–≤"]}
    }
  },
  "5. –ö–†–û–°–°-–ü–†–û–î–ê–ñ–ò": {
    "weight": 0.10,
    "items": {
      "5.1 –î–æ–ø. –ø—Ä–æ–¥—É–∫—Ç":            {"w":0.10, "kw_any":["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","–¥–µ–±–µ—Ç","–∫–∞—Ä—Ç–∞","—Å—Ç—Ä–∞—Ö–æ–≤"]}
    }
  },
  "6. –ó–ê–í–ï–†–®–ï–ù–ò–ï": {
    "weight": 0.15,
    "items": {
      "6.1 –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã":        {"w":0.02, "kw_any":["–≤–æ–ø—Ä–æ—Å"]},
      "6.2 –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞":       {"w":0.03, "kw_any":["–≤—Å—Ç—Ä–µ—á"]},
      "6.3 –¢–µ–ª–µ—Ñ–æ–Ω":                 {"w":0.03, "kw_any":["—Ç–µ–ª–µ—Ñ–æ–Ω"]},
      "6.4 –ö–æ–Ω—Ç–∞–∫—Ç—ã":                {"w":0.03, "kw_any":["–∫–æ–Ω—Ç–∞–∫—Ç"]},
      "6.5 –†–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":     {"w":0.02, "kw_any":["–±—É–∫–ª–µ—Ç","–º–∞—Ç–µ—Ä–∏–∞–ª","—Ä–∞—Å—á–µ—Ç","–ø—Ä–æ—Å—á–µ—Ç","—Ä–∞—Å—á—ë—Ç","–ø—Ä–æ—Å—á—ë—Ç"]},
      "6.6 –ü—Ä–æ—â–∞–Ω–∏–µ":                {"w":0.02, "kw_any":["–¥–æ —Å–≤–∏–¥–∞–Ω","–∂–¥–µ–º","–∂–¥—ë–º","—Ä–∞–¥—ã"]}
    }
  }
}""")

STAGE7_WEIGHT = 0.10
STAGE7_TEXT = """\
1. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ—Å—Ç—å –∑–∞–ª–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —á–∏—Å—Ç–æ—Ç–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∞—Ö–æ–≤)
2. –ù–µ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —à—É–º–æ–≤
3. –î–µ–ª–æ–≤–æ–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
4. –ü–ª–∞—Ç–æ–∫/–≥–∞–ª—Å—Ç—É–∫ –∏ –±–µ–π–¥–∂ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
"""

# ------------ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ ------------------------------
MAX_ATTEMPTS = 3   # –ø–æ—Å–ª–µ 3-–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É

# ------------ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ --------------------------------
def build_queue() -> deque:
    q = deque()
    for s, data in CRITERIA.items():
        for c in data["items"]:
            q.append((s, c))
    q.append(("7. –î–û–ü. –ò–ù–§–û–†–ú–ê–¶–ò–Ø", "stage7"))
    return q

def session_init():
    st.session_state.q        = build_queue()
    st.session_state.score    = {s: 0.0 for s in CRITERIA}
    st.session_state.accum    = {}
    st.session_state.tries    = {}
    st.session_state.stage7   = False
    st.session_state.finished = False
    st.session_state.chat     = []

if "q" not in st.session_state:
    session_init()

def add(role: str, text: str):
    st.session_state.chat.append((role, text))

# ------------ UI: –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ --------------------------------
st.title("–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–∞–π–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ü–°–ë")

for r, m in st.session_state.chat:
    st.chat_message(r).write(m)

# ------------ –ø–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞ -----------------------------------
if not st.session_state.chat:
    add("assistant", "–¢–ü: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ –æ–∫–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")
    st.chat_message("assistant").write("–¢–ü: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ –æ–∫–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

# ------------ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -----------------------
def process(ans: str):
    sec, crit = st.session_state.q[0]

    # ---------- Stage-7 ----------
    if crit == "stage7":
        if normalize(ans) in ("–¥–∞", "–≤—Å–µ", "–≤—Å—ë"):
            st.session_state.stage7 = True
            st.session_state.q.popleft()
            add("assistant", "‚úÖ  –≠—Ç–∞–ø 7 –∑–∞—á—Ç—ë–Ω, –±–ª–∞–≥–æ–¥–∞—Ä—é!")
        else:
            add("assistant", "‚ö†Ô∏è  –î–ª—è –∑–∞—á—ë—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–í—Å–µ¬ª.")
        return

    cfg = CRITERIA[sec]["items"][crit]
    cid = f"{sec} >> {crit}"

    # –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    st.session_state.accum[cid] = st.session_state.accum.get(cid, "") + " " + ans
    st.session_state.tries[cid] = st.session_state.tries.get(cid, 0) + 1
    collected = st.session_state.accum[cid]

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ ---
    ok = True
    if "kw_all" in cfg:          ok &= has_all(cfg["kw_all"], collected)
    if "kw_any" in cfg:          ok &= has_any(cfg["kw_any"], collected)
    if "kw_any2" in cfg:         ok &= has_any(cfg["kw_any2"], collected)

    if ok:
        st.session_state.score[sec] += cfg.get("w", 0)
        st.session_state.q.popleft()
        add("assistant", "‚úÖ  –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ.")
        st.session_state.accum.pop(cid, None)
        st.session_state.tries.pop(cid, None)
    else:
        if st.session_state.tries[cid] >= MAX_ATTEMPTS:
            hint = " / ".join(cfg.get("kw_any", cfg.get("kw_all", [])))
            if "kw_any2" in cfg:
                hint += " + (" + " / ".join(cfg["kw_any2"]) + ")"
            add("assistant", f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω—É–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å: {hint}")
        else:
            add("assistant", "‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç.")

# ------------ –≤—ã–≤–æ–¥ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ -------------------------
if st.session_state.q:
    sec, crit = st.session_state.q[0]
    prompt = (f"–¢–ü: –î–æ–ø. –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ñ–∏—Å–∞:\n{STAGE7_TEXT}\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å—ë –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É?"
              if crit == "stage7"
              else f"–¢–ü (–∫—Ä–∏—Ç–µ—Ä–∏–π {crit} —Å–µ–∫—Ü–∏–∏ ¬´{sec}¬ª): –ø—Ä–æ—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    st.chat_message("assistant").write(prompt)

    user = st.chat_input("–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞‚Ä¶")
    if user:
        add("user", user)
        process(user)
        st.rerun()
else:
    # ---------- —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω ----------
    if not st.session_state.finished:
        gained = sum(st.session_state.score.values()) + (STAGE7_WEIGHT if st.session_state.stage7 else 0)
        total  = sum(s["weight"] for s in CRITERIA.values()) + STAGE7_WEIGHT
        pct    = round(gained / total * 100, 1)
        verdict = ("–û–¢–õ–ò–ß–ù–û" if pct >= 90 else
                   "–•–û–†–û–®–û"  if pct >= 75 else
                   "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" if pct >= 60 else
                   "–ù–£–ñ–ù–û –î–û–†–ê–ë–û–¢–ê–¢–¨")
        add("assistant", f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {pct}%  ‚Ä¢  –°—Ç–∞—Ç—É—Å: {verdict}")
        st.session_state.finished = True
        st.rerun()
